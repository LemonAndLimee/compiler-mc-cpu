# Compiler
CXX = g++

# Compiler flags
CXXFLAGS = -Wall -g -std=c++17 -DOS_X

LDFLAGS=-Wl,-rpath,/usr/local/boost/boost_1_87_0/lib/

# Target executable
TARGET_DIR=Bin
TARGET = $(TARGET_DIR)/UnitTests

# Source files
SRCS=$(wildcard *.cpp)
# Object files
OBJS_NAMES = $(SRCS:.cpp=.o)
OBJS_DIR = $(TARGET_DIR)/Objs
OBJS = $(patsubst %,$(OBJS_DIR)/%,$(OBJS_NAMES))

# Object files generated by the main project
MAIN_PROJ_OBJS_DIR = ../$(OBJS_DIR)
# Filter out main file to avoid main() conflicts
MAIN_PROJ_OBJS = $(filter-out $(MAIN_PROJ_OBJS_DIR)/Compiler.o,$(wildcard $(MAIN_PROJ_OBJS_DIR)/*.o))

INC=-I/usr/local/boost/boost_1_87_0/include/ -I/usr/local/turtle-1.3.1/include/ -I../
LIB_DIRs=-L/usr/local/boost/boost_1_87_0/lib/
LIBS=-lboost_unit_test_framework

# Default rule to build the executable
all: main_build directory $(TARGET)

main_build:
	cd .. && make

main_build_clean:
	cd .. && make clean

rebuild_test: clean all

rebuild: main_build_clean rebuild_test

# Rule to make objects directory
directory:
	@mkdir -p $(TARGET_DIR)
	@mkdir -p $(OBJS_DIR)

# Rule to link object files into the target executable
$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $(TARGET) $(OBJS) $(MAIN_PROJ_OBJS) $(INC) $(LIB_DIRs) $(LIBS)

# Rule to compile .cpp files into .o files
$(OBJS_DIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@ $(INC)

# Rule to run the executable
run: $(TARGET)
	./$(TARGET)

# Clean rule to remove generated files
clean:
	-rm $(TARGET)
	-rm $(OBJS)