// Complex example showcasing all compiler language features
// Demonstrates control flow, expressions, operators, and scoping

// Variable declarations and basic arithmetic
byte number = 10;
byte factor = 3;
byte result = number * factor;

// While loop with complex condition
while (result < 100) {
// Conditional logic with comparison operators
    if (result <= 50) {
        result = result + (number * 2);
    } else {
        result = result + number;
    };
    
// Update loop variable
    number = number + 1;
};

// Bitwise operations demonstration
byte mask = 15;
byte shifted = result >> 2;
byte combined = shifted & mask;

// For loop with nested conditions and local scope
for (byte i = 0; i < 8; i = i + 1) {
// Local variable in for loop scope
    byte temp = i * 2;
    
// Nested if-else with logical operators
    if ((i % 2) == 0) {
// Even numbers: use bitwise OR
        temp = temp | 1;
        combined = combined + temp;
    } else {
// Odd numbers: use XOR operation
        temp = temp ^ 7;
        combined = combined - temp;
    };
};

// Complex expression with operator precedence
byte final_calc = ((combined + 5) * 3) + 2;

// Nested scoping with multiple levels
if (final_calc > 20) {
    byte outer_var = final_calc;
    
    if (outer_var > 30) {
        byte inner_var = outer_var % 16;
        outer_var = outer_var + inner_var;
        
// Deeply nested condition
        if (inner_var < 8) {
            byte deep_var = inner_var << 1;
            inner_var = deep_var + 1;
        };
    };
    
    final_calc = outer_var;
};

// Logical operations with negation
byte flag = 1;
if (!flag || (final_calc >= 50)) {
    result = result + 10;
} else {
    result = result - 5;
};

// Complex arithmetic with exponentiation and modulo
byte power_result = 2 ^ 4;
byte mod_result = power_result % 7;
byte arithmetic = (power_result + mod_result) * final_calc;

// Final conditional with compound logical expression
if ((arithmetic != 0) && ((arithmetic % 3) == 1) && (result > arithmetic)) {
    byte success = 1;
} else {
    byte failure = 0;
};
